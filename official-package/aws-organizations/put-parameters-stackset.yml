---
Parameters:
  FalconClientID:
    Description: Your Falcon OAuth2 Client ID.
    NoEcho: 'true'
    Type: String
    Default: 'test'
  FalconSecret:
    Description: Your Falcon OAuth2 API Secret.
    NoEcho: 'true'
    Type: String
    Default: 'test'
  BaseURL:
    Description: Your Falcon OAuth2 API Base URL.
    Type: String
    Default: 'test'
  FalconClientIDParameter:
    Description: Your Falcon OAuth2 Client ID Parameter name.
    Type: String
    Default: 'test-client'
  FalconSecretParameter:
    Description: Your Falcon OAuth2 API Secret Parameter name.
    Type: String
    Default: 'test-secret'
  BaseURLParameter:
    Description: Your Falcon OAuth2 API Base URL Parameter name.
    Type: String
    Default: 'testbase'

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMFullAccess'

  TriggerPutParametersLambda:
    Type: 'Custom::TriggerLambda'
    DependsOn:
      - LambdaRole
    Properties:
      ServiceToken: !GetAtt
        - PutParametersLambda
        - Arn

  PutParametersLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          falcon_client_id: !Ref FalconClientID
          falcon_secret: !Ref FalconSecret
          falcon_cloud: !Ref BaseURL
          falcon_client_id_name: !Ref FalconClientIDParameter
          falcon_secret_name: !Ref FalconSecretParameter
          falcon_cloud_name: !Ref BaseURLParameter
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt "LambdaRole.Arn"
      Runtime: python3.7
      Timeout: 300
      Code:
        ZipFile: |
          """
          CrowdStrike Store Secret Parameters Lambda Function

          ______                         __ _______ __         __ __
          |      |.----.-----.--.--.--.--|  |     __|  |_.----.|__|  |--.-----.
          |   ---||   _|  _  |  |  |  |  _  |__     |   _|   _||  |    <|  -__|
          |______||__| |_____|________|_____|_______|____|__|  |__|__|__|_____|

          Falcon Store Secret Parameters Lambda Function v1.0

          Creation date: 11.01.23 - ryanjpayne@CrowdStrike
          """

          import boto3
          import logging
          import os
          import requests
          import json

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          FALCON_CLIENT_ID = os.environ['falcon_client_id']
          FALCON_SECRET = os.environ['falcon_secret']
          FALCON_CLOUD = os.environ['falcon_cloud']
          FALCON_CLIENT_ID_NAME = os.environ['falcon_client_id_name']
          FALCON_SECRET_NAME = os.environ['falcon_secret_name']
          FALCON_CLOUD_NAME = os.environ['falcon_cloud_name']

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          def put_parameters(event):
              ssm = boto3.client('ssm')
              try:
                  ssm.put_parameter(
                      Name=FALCON_CLIENT_ID_NAME,
                      Value=FALCON_CLIENT_ID,
                      Type='SecureString',
                      Overwrite=True,
                      Tier='Standard',
                      DataType='text'
                  )
                  ssm.put_parameter(
                      Name=FALCON_SECRET_NAME,
                      Value=FALCON_SECRET,
                      Type='SecureString',
                      Overwrite=True,
                      Tier='Standard',
                      DataType='text'
                  )
                  ssm.put_parameter(
                      Name=FALCON_CLOUD_NAME,
                      Value=FALCON_CLOUD,
                      Type='SecureString',
                      Overwrite=True,
                      Tier='Standard',
                      DataType='text'
                  )
                  parameter_names = [FALCON_CLIENT_ID_NAME, FALCON_SECRET_NAME, FALCON_CLOUD_NAME]
                  return parameter_names
              except Exception as e:
                  response_dict={}
                  response_dict['exception'] = e
                  cfnresponse_send(event, FAILED, response_dict, "CustomResourcePhysicalID")

          def cfnresponse_send(event, responseStatus, responseData, physicalResourceId=None):
              responseUrl = event['ResponseURL']
              print(responseUrl)
              responseBody = {}
              responseBody['Status'] = responseStatus
              responseBody['Reason'] = 'See the details in CloudWatch Log Stream: '
              responseBody['PhysicalResourceId'] = physicalResourceId
              responseBody['StackId'] = event['StackId']
              responseBody['RequestId'] = event['RequestId']
              responseBody['LogicalResourceId'] = event['LogicalResourceId']
              responseBody['Data'] = responseData
              json_responseBody = json.dumps(responseBody)
              print("Response body:\n" + json_responseBody)
              headers = {
                  'content-type': '',
                  'content-length': str(len(json_responseBody))
              }
              try:
                  response = requests.put(responseUrl,
                                          data=json_responseBody,
                                          headers=headers)
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))
              
          def lambda_handler(event, context):
              try:
                logger.info('Got event {}'.format(event))
                logger.info('Context {}'.format(context))
                parameters = put_parameters(event)
                response_dict={}
                response_dict['parameters'] = parameters
                cfnresponse_send(event, SUCCESS, response_dict, "CustomResourcePhysicalID")
              except Exception as e:
                  response_dict={}
                  response_dict['exception'] = e
                  cfnresponse_send(event, FAILED, response_dict, "CustomResourcePhysicalID")

