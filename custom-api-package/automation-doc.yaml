description: Automation Document for installing the Crowdstike's Falcon Sensor .
schemaVersion: '0.3'
assumeRole: '{{AutomationAssumeRole}}'
parameters:
  AutomationAssumeRole:
    type: String
    description: "(Required) The ARN of the role that allows Automation to perform
      the actions on your behalf. If no role is specified, Systems Manager Automation
      uses your IAM permissions to run this runbook."
    default: ''
  WindowsInstallerParams:
    type: String
    default: ''
    description: (Optional) Enter CrowdStrike's install time params for Windows nodes. For more info refer to the Falcon console documentation.
  LinuxInstallerParams:
    type: String
    default: ''
    description: (Optional) Enter CrowdStrike's install time params for Linux nodes. For more info refer to the Falcon console documentation.
  WindowsUninstallParams:
    type: String
    default: ''
    description: (Optional) Enter CrowdStrike's uninstall time params for Windows nodes. For more info refer to the Falcon console documentation.
  LinuxUninstallParams:
    type: String
    default: ''
    description: (Optional) Enter CrowdStrike's uninstall time params for Linux nodes. For more info refer to the Falcon console documentation.
  Action:
    type: String
    allowedValues:
      - Install
      - Uninstall
    description: (Required) Specify whether or not to install or uninstall the package.
    default: Install
  InstallationType:
    type: String
    allowedValues:
      - Uninstall and reinstall
    description: '(Optional) Specify the type of installation. Uninstall and reinstall: The application is taken offline until the reinstallation process completes. In-place update: The application is available while new or updated files are added to the installation.'
    default: Uninstall and reinstall
  PackageName:
    type: String
    description: '(Required) The name of the distributor package to run.'
    default: CrowdStrike-FalconSensor
  LinuxPackageVersion:
    type: String
    description: '(Optional) The version of the package to on Linux nodes. Defaults to n-1, where n is the latest version.'
    default: ''
  WindowsPackageVersion:
    type: String
    description: '(Optional) The version of the package to on Windows nodes. Defaults to n-1, where n is the latest version.'
    default: ''
  FalconCloud:
    type: String
    description: '(Required) SSM Parameter Store name that contains the Falcon Cloud URL for CrowdStrike APIs.'
    default: /CrowdStrike/Falcon/Cloud
  FalconClientId:
    type: String
    default: /CrowdStrike/Falcon/ClientId
    description: '(Required) SSM Parameter Store name that contains the Falcon Client Id for CrowdStrike APIs.'
  FalconClientSecret:
    type: String
    description: '(Required) SSM Parameter Store name that contains the Falcon Client Secret for CrowdStrike APIs.'
    default: /CrowdStrike/Falcon/ClientSecret
  InstanceIds:
    type: StringList
  Targets:
    type: MapList
    default: []
mainSteps:
  - name: GetAuthenticationToken
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.7
      Handler: script_handler
      Script: |-
        import http.client
        import mimetypes
        import urllib.parse
        import boto3
        import json

        def script_handler(events, context):
          print('Configuring AWS region {}'.format(events['Region']))
          ssm = boto3.client('ssm', region_name=events['Region'])

          print('Fetching required configuration from Parameter Service')

          print('... Fetching FalconCloud')
          apiGateWayHostResponse = ssm.get_parameter(Name=events['FalconCloud'], WithDecryption=True)
          if apiGateWayHostResponse['ResponseMetadata']['HTTPStatusCode'] != 200:
            raise ValueError('Required property {} not found'.format(events['FalconCloud']))

          print('... Fetching FalconClientId')
          apiGatewayClientIDResponse = ssm.get_parameter(Name=events['FalconClientId'], WithDecryption=True)
          if apiGatewayClientIDResponse['ResponseMetadata']['HTTPStatusCode'] != 200:
            raise ValueError('Required property {} not found'.format(events['FalconClientId']))

          print('... Fetching FalconClientSecret')
          apiGatewayClientSecretResponse = ssm.get_parameter(Name=events['FalconClientSecret'], WithDecryption=True)
          if apiGatewayClientSecretResponse['ResponseMetadata']['HTTPStatusCode'] != 200:
            raise ValueError('Required property {} not found'.format(events['FalconClientSecret']))

          apiGateWayHostValue = apiGateWayHostResponse['Parameter']['Value']
          apiGateWayHostValue = apiGateWayHostValue.replace("https://", "").replace("http://", "")
          apiGatewayClientIDValue = apiGatewayClientIDResponse['Parameter']['Value']
          apiGatewayClientSecretValue = apiGatewayClientSecretResponse['Parameter']['Value']

          try:
            print('Requesting Authentication token from Crowdstrike backend.')
            conn = http.client.HTTPSConnection(apiGateWayHostValue)
            params = urllib.parse.urlencode({'client_id': apiGatewayClientIDValue, 'client_secret': apiGatewayClientSecretValue})
            headers = {'Content-Type': 'application/x-www-form-urlencoded'}
            conn.request('POST', '/oauth2/token', params, headers)
            res = conn.getresponse()

            if res.status != 201:
              raise ValueError('Received non success response {}. Error {}'.format(res.status, res.reason))

            data = res.read()
            print('Successfully received OAuth token.')
            return {'AuthToken': json.loads(data)['access_token'], 'ApiGatewayHost':apiGateWayHostValue}
          except Exception as e:
            raise ValueError('Failure while interacting with Crowdstrike backend. Error: {}'.format(e))
      InputPayload:
        FalconCloud: '{{FalconCloud}}'
        FalconClientId: '{{FalconClientId}}'
        FalconClientSecret: '{{FalconClientSecret}}'
        Region: '{{global:REGION}}'
    outputs:
      - Name: AuthToken
        Selector: $.Payload.AuthToken
        Type: String
      - Name: FalconCloud
        Selector: $.Payload.ApiGatewayHost
        Type: String
  - name: GetCustomerIdentifier
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.7
      Handler: script_handler
      Script: |
        import http.client
        import mimetypes
        import urllib.parse
        import json
        def script_handler(events, context):
          try:
            print('Requesting Customer ID from Crowdstrike backend.')
            conn = http.client.HTTPSConnection(events["FalconCloud"])
            headers = {
              'Authorization': "Bearer {}".format(events["AuthToken"])
            }

            conn.request("GET", "/sensors/queries/installers/ccid/v1", "", headers)
            res = conn.getresponse()

            if res.status != 200:
              raise ValueError('Received non success response {}. Error {}'.format(res.status, res.reason))

            data = res.read()
            print('Successfully received Customer ID.')
            return {'CCID': json.loads(data)['resources'][0]}
          except Exception as e:
            raise ValueError('Failure while interacting with Crowdstrike backend. Error {}'.format(e))
      InputPayload:
        AuthToken: '{{GetAuthenticationToken.AuthToken}}'
        FalconCloud: '{{GetAuthenticationToken.FalconCloud}}'
    outputs:
      - Name: CCID
        Selector: $.Payload.CCID
        Type: String
  - name: GetInstallationToken
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.6
      Handler: script_handler
      Script: |-
        import http.client
        import mimetypes
        import urllib.parse
        import json
        def script_handler(events, context):
          try:
            print('Requesting Installtion Token from Crowdstrike backend.')
            conn = http.client.HTTPSConnection(events["FalconCloud"])

            headers = {
              'Authorization': "Bearer {}".format(events["AuthToken"])
            }

            conn.request("GET", "/installation-tokens/queries/tokens/v1?filter=status:'valid'", "", headers)
            queryRes = conn.getresponse()

            if queryRes.status != 200:
              raise ValueError('Received non success response {} while querying for token. Error {}'.format(res.status, res.reason))

            queryResData = queryRes.read()
            resId = json.loads(queryResData)['resources'][0]

            url ="/installation-tokens/entities/tokens/v1?ids={}".format(resId)
            conn.request("GET", url, "", headers)
            entitiesRes = conn.getresponse()

            if entitiesRes.status != 200:
              raise ValueError('Received non success response {} while fetching token by id. Error {}'.format(res.status, res.reason))

            entitiesResData = entitiesRes.read()
            token = json.loads(entitiesResData)['resources'][0]['value']

            print('Successfully received Installation token')
            return {'InstallationToken': token }
          except Exception as e:
            raise ValueError('Failure while interacting with Crowdstrike backend. Error {}'.format(e))
      InputPayload:
        AuthToken: '{{GetAuthenticationToken.AuthToken}}'
        FalconCloud: '{{GetAuthenticationToken.FalconCloud}}'
    outputs:
      - Selector: $.Payload.InstallationToken
        Name: InstallationToken
        Type: String
  - name: ExecuteDistributorPackage
    action: 'aws:runCommand'
    inputs:
      Targets: '{{ Targets }}'
      InstanceIds: '{{ InstanceIds }}'
      DocumentName: AWS-ConfigureAWSPackage
      Parameters:
        name: '{{PackageName}}'
        action: '{{Action}}'
        version: '{{PackageVersion}}'
        additionalArguments:
          SSM_INSTALLTOKEN: '{{GetInstallationToken.InstallationToken}}'
          SSM_CID: '{{GetCustomerIdentifier.CCID}}'
          SSM_WIN_INSTALLPARAMS: '{{WindowsInstallerParams}}'
          SSM_LINUX_INSTALLPARAMS: '{{LinuxInstallerParams}}'
          SSM_WIN_UNINSTALLPARAMS: '{{WindowsUninstallParams}}'
          SSM_LINUX_UNINSTALLPARAMS: '{{LinuxUninstallParams}}'
          SSM_AUTH_TOKEN: '{{GetAuthenticationToken.AuthToken}}'
          SSM_HOST: '{{GetAuthenticationToken.FalconCloud}}'


